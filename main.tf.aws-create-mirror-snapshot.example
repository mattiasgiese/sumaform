// This template can be used to create a mirror hosts data snapshot.
// To do so, copy this template to main.tf, fill in your SCC and AWS
// credentials and the regions.

// Create a mirror instance using 'terraform apply', and if successful,
// follow the instruction in backend_modules/aws/README.md

// If you want to base the snapshot on an existing snapshot, either set
// data_volume_snapshot_id to the ID of the snapshot to use, or set it
// to "${data.aws_ebs_snapshot.data_disk_snapshot.id}" to look up the
// latest snapshot.

locals {
  cc_username       = "" // SCC or NCC username
  cc_password       = "" // SCC password
  key_name          = "" // SSH key name
  key_file          = "" // SSH key file
  name_prefix       = "mirrorsnap"  // change to a prefix if you do not have an exclusive VPC
  region            = "eu-west-2"
  availability_zone = "${local.region}a"
  ssh_allowed_ips   = [""] // add your IP address in here
}

provider "aws" {
  region     = "${local.region}"
  access_key = "" // add access key as a string here
  secret_key = "" // add secret key as a string here
}


module "base" {
  source = "./modules/base"

  cc_username = local.cc_username
  cc_password = local.cc_password

  name_prefix = local.name_prefix

  provider_settings = {
    availability_zone = local.availability_zone
    region            = local.region
    ssh_allowed_ips   = local.ssh_allowed_ips
    key_name          = local.key_name
    key_file          = local.key_file
  }
}
// uncomment next module to use existing snapshot as starting point
//data "aws_ebs_snapshot" "data_disk_snapshot" {
//  most_recent = true
//
//  filter {
//    name   = "tag:Name"
//    values = ["mirror-data-volume-snapshot"]
//  }
//}

module "mirror" {
  source = "./modules/mirror"

  base_configuration = module.base.configuration
  //  image = "ami-014f38181a6bc0c52"
  //  name = "ricardo_test_machine"

  provider_settings = {
    public_instance = true
  }
  volume_provider_settings = {
// uncomment next line to use existing snapshot as starting point
//    volume_snapshot_id = data.aws_ebs_snapshot.data_disk_snapshot.id
  }
}
output "configuration" {
  value = {
    base          = module.base.configuration
    mirror        = module.mirror.configuration
    region        = local.region
    //snapshot_name = data.aws_ebs_snapshot.data_disk_snapshot
  }
}
